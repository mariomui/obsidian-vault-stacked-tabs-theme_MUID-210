@use "./raw-colors.scss" as raw-colors;
@use "./material-ui-colors" as MAT_COLORS;

$secondary: raw-colors.$material-color-orange-800;
$secondaryAlt: raw-colors.$material-color-orange-700;
$primary: raw-colors.$tertiary-blue;
$primaryAlt: raw-colors.$material-color-purple-900;

$embedBorderColor: #{$secondary};

$embedPrimaryLinkColor: raw-colors.$material-color-orange-700;
$accentAlt: raw-colors.$material-color-brown-900;

// :skull: --secondary: var(--material-color-purple-a100);

$callout: raw-colors.$material-color-green-900;
$calloutAlt: raw-colors.$material-color-blue-900;

$accentSecondary: raw-colors.$material-color-indigo-200;
$bookSource: raw-colors.$material-color-indigo-900;
$borderColor: raw-colors.$material-color-deep-orange;

// #C6BAAD
$unresolvedLinkColor: #c6baad;

$tertiary-blue-700: #111;
$tertiary-blue-800: #112;
$tertiary-blue-900: #114;
$nbc: $tertiary-blue-800;
$shade: rgba(0, 0, 0, 0.8);

$bar-outline-color: MAT_COLORS.$material-color-blue-800;
$bar-color: MAT_COLORS.$material-color-blue-900;

// # Functions

@function getRandomColor($colorsMap) {
  // $note_color: color.adjust($note_color, $lightness: 10%, $saturation: 30%);
  $random_color_index: random(length($colorsMap));

  @each $key, $value in $colorsMap {
    $index: index($colorsMap, $key $value);
    @if $index == $random_color_index {
      $note_color: map-get($colorsMap, $key);
      @return $note_color;
    }
  }
  @debug "Please check the colorsMap";
  @return black;
  // color.adjust($note_color, $lightness: 50%, $saturation: 30%);
}
